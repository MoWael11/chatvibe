generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma" 
  runtime                = "nodejs"
  moduleFormat           = "esm"
  generatedFileExtension = "ts"
  importFileExtension    = "ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id        String    @id @default(uuid())
  userId    String    @unique
  name      String
  imageUrl  String
  email     String    @unique
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
  channels  Channel[]
  members   Member[]
  servers   Server[]

  @@map("user")
}

model Server {
  id         String    @id @default(uuid())
  name       String
  imageUrl   String
  inviteCode String    @unique
  createdAt  DateTime  @default(now())
  updateAt   DateTime  @updatedAt
  profileId  String
  channels   Channel[]
  members    Member[]
  profile    Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("server")
}

model Member {
  id                    String          @id @default(uuid())
  role                  MemberRole      @default(GUEST)
  createdAt             DateTime        @default(now())
  updateAt              DateTime        @updatedAt
  profileId             String
  serverId              String
  conversationInitiated Conversation[]  @relation("MemberOne")
  conversationReceived  Conversation[]  @relation("MemberTwo")
  directMemssages       DirectMessage[]
  profile               Profile         @relation(fields: [profileId], references: [id], onDelete: Cascade)
  server                Server          @relation(fields: [serverId], references: [id], onDelete: Cascade)
  messages              Message[]

  @@unique([profileId, serverId])
  @@map("member")
}

model Channel {
  id        String      @id @default(uuid())
  name      String
  type      ChannelType @default(TEXT)
  createdAt DateTime    @default(now())
  updateAt  DateTime    @updatedAt
  profileId String
  serverId  String
  profile   Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  server    Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@map("channel")
}

model Message {
  id        String   @id @default(uuid())
  content   String
  fileUrl   String?
  memberId  String
  channelId String
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@map("message")
}

model Conversation {
  id             String          @id @default(uuid())
  memberOneId    String
  memberTwoId    String
  memberOne      Member          @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwo      Member          @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@map("conversation")
}

model DirectMessage {
  id             String       @id @default(uuid())
  content        String
  fileUrl        String?
  memberId       String
  conversationId String
  deleted        Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  member         Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@map("direct-message")
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}
